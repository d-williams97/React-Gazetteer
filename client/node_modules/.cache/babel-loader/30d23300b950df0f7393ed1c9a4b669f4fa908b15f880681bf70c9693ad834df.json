{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect, createContext } from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\nimport Airports from \"./airports/Airports\";\nimport Cities from \"./cities/Cities\";\nimport BasicDataBtn from \"./buttons/BasicDataBtn\";\nimport WeatherBtn from \"./buttons/WeatherBtn\";\nimport WikiBtn from \"./buttons/WikiBtn\";\nimport ExchangeRateBtn from \"./buttons/ExchangeRateBtn\";\nimport TimeZoneBtn from \"./buttons/TimeZoneBtn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://localhost:3001\";\nconst Map = props => {\n  _s();\n  // Getting country data for select\n  const [countryData, setCountryData] = useState(null);\n  const CountryDataContext = /*#__PURE__*/createContext(null);\n  const getCountries = async () => {\n    await fetch(`${API_BASE}/country-data`).then(res => res.json()).then(data => {\n      setCountryData(data);\n    }).catch(err => console.error(\"Error: \", err));\n  };\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n  // Getting the border\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const borderHandler = x => {\n    setGeoJsonData(x);\n  };\n\n  // ------- Airports ---------- //\n\n  const [airports, setAirports] = useState(null);\n\n  // Getting Airport data //\n  const airportsHandler = async countryCode => {\n    let data = await fetch(`${API_BASE}/airport-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        countryCode: countryCode\n      })\n    }).then(res => res.json()).catch(e => console.error('Error', e));\n    setAirports(data);\n  };\n\n  // ------- Cities ---------- //\n\n  const [cities, setCities] = useState(null);\n\n  // Getting City data //\n  const citiesHandler = async countryCode => {\n    let data = await fetch(`${API_BASE}/city-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        countryCode: countryCode\n      })\n    }).then(res => res.json()).catch(e => console.error('Error', e));\n    setCities(data);\n  };\n  return /*#__PURE__*/_jsxDEV(CountryDataContext.Provider, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [0, 0],\n      zoom: 2,\n      scrollWheelZoom: true,\n      minZoom: 1,\n      children: [/*#__PURE__*/_jsxDEV(BasicDataBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(WeatherBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(WikiBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ExchangeRateBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TimeZoneBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        borderHandler: borderHandler,\n        countryData: countryData,\n        setCountryData: setCountryData,\n        getAirports: airportsHandler,\n        getCities: citiesHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapLayers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Airports, {\n        airports: airports\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Cities, {\n        cities: cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: {\n          color: \"red\",\n          weight: 1,\n          opacity: 1\n        }\n      }, JSON.stringify(geoJsonData), false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"Q6sTtDcsD1R8LoYzMPD+JV8noqo=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","createContext","MapContainer","GeoJSON","List","MapLayers","Airports","Cities","BasicDataBtn","WeatherBtn","WikiBtn","ExchangeRateBtn","TimeZoneBtn","jsxDEV","_jsxDEV","API_BASE","Map","props","_s","countryData","setCountryData","CountryDataContext","getCountries","fetch","then","res","json","data","catch","err","console","error","geoJsonData","setGeoJsonData","borderHandler","x","airports","setAirports","airportsHandler","countryCode","method","headers","body","JSON","stringify","e","cities","setCities","citiesHandler","Provider","children","center","zoom","scrollWheelZoom","minZoom","fileName","_jsxFileName","lineNumber","columnNumber","getAirports","getCities","style","color","weight","opacity","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect, createContext } from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\n\n\nimport \"leaflet/dist/leaflet.css\";\n\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\nimport Airports from \"./airports/Airports\";\nimport Cities from \"./cities/Cities\";\nimport BasicDataBtn from \"./buttons/BasicDataBtn\";\nimport WeatherBtn from \"./buttons/WeatherBtn\";\nimport WikiBtn from \"./buttons/WikiBtn\";\nimport ExchangeRateBtn from \"./buttons/ExchangeRateBtn\";\nimport TimeZoneBtn from \"./buttons/TimeZoneBtn\";\n\nconst API_BASE = \"http://localhost:3001\";\n\n\n\nconst Map = (props) => {\n  // Getting country data for select\n  const [countryData, setCountryData] = useState(null);\n  \n  const CountryDataContext = createContext(null);\n\n\n  const getCountries = async () => {\n    await fetch(`${API_BASE}/country-data`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryData(data);\n      })\n      .catch((err) => console.error(\"Error: \", err));\n  };\n\n\n\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n\n\n  // Getting the border\n  const [geoJsonData, setGeoJsonData] = useState(null);\n\n  const borderHandler = (x) => {\n    setGeoJsonData(x);\n  };\n\n\n// ------- Airports ---------- //\n\n  const [airports, setAirports] = useState(null)\n\n  // Getting Airport data //\n  const airportsHandler = async (countryCode) => {\n    let data = await fetch(`${API_BASE}/airport-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        countryCode: countryCode,\n      }),\n    })\n      .then((res) => res.json())\n      .catch(e => console.error('Error', e))\n      setAirports(data);\n  };\n\n\n  // ------- Cities ---------- //\n\nconst [cities, setCities] = useState(null);\n\n  // Getting City data //\n  const citiesHandler = async (countryCode) => {\n\n    let data = await fetch(`${API_BASE}/city-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        countryCode: countryCode\n      }),\n    })\n    .then((res) => res.json())\n    .catch(e => console.error('Error',e))\n\n    setCities(data);\n  }\n\n\n\n\n  return (\n    <CountryDataContext.Provider >\n      <MapContainer center={[0, 0]} zoom={2} scrollWheelZoom={true} minZoom={1}>\n      <BasicDataBtn geoJsonData={geoJsonData} />\n      <WeatherBtn geoJsonData={geoJsonData} />\n      <WikiBtn geoJsonData={geoJsonData} />\n      <ExchangeRateBtn geoJsonData={geoJsonData} />\n      <TimeZoneBtn geoJsonData={geoJsonData} />\n        <List\n          borderHandler={borderHandler}\n          countryData={countryData}\n          setCountryData={setCountryData}\n          getAirports={airportsHandler}\n          getCities={citiesHandler}\n        />\n        <MapLayers />\n        < Airports airports={airports} />\n        < Cities cities={cities} />\n        <GeoJSON\n          data={geoJsonData}\n          key={JSON.stringify(geoJsonData)}\n          style={{\n            color: \"red\",\n            weight: 1,\n            opacity: 1,\n          }}\n        />\n      </MapContainer>\n      </CountryDataContext.Provider>\n  );\n};\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}