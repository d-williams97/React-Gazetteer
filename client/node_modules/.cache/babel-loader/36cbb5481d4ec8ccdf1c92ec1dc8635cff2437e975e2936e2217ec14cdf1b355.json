{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/list/List.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"./List.module.css\";\nimport Form from 'react-bootstrap/Form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useMap } from \"react-leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://localhost:3001\";\nlet countryName;\nlet countryCode;\nconst List = props => {\n  _s();\n  console.log(props.border);\n  const map = useMap();\n  const [countryData, setCountryData] = useState(null);\n\n  //get data\n  useEffect(() => {\n    // For getting country data\n    getCountries();\n  }, []);\n\n  // Getting country data for select\n  const getCountries = async () => {\n    const data = await fetch(`${API_BASE}/country-data`).then(res => res.json()).then(data => {\n      setCountryData(data);\n      console.log(data);\n    }).catch(err => console.error(\"Error: \", err));\n  };\n  const getBoundsHandler = async countryName => {\n    const data = await fetch(`${API_BASE}/bounds-data/${countryName}`).then(res => res.json()).then(data => {\n      console.log(data.bounds);\n      let bounds = [data.bounds.southwest, data.bounds.northeast];\n      console.log(bounds);\n      //   console.log(map.fitBounds());\n    }).catch(err => {\n      console.error(\"Error: \", err);\n    });\n    return data;\n  };\n\n  // country change event //\n  const changeCountryHandler = value => {\n    let selectedCountry = countryData.find(country => country.properties.iso_a2 === value);\n    countryName = selectedCountry.properties.name;\n    countryCode = value;\n    props.borderHandler(selectedCountry);\n    getBoundsHandler(countryName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.list,\n    children: /*#__PURE__*/_jsxDEV(Form.Select, {\n      \"aria-label\": \"Default select example\",\n      onChange: e => {\n        changeCountryHandler(e.target.value);\n      },\n      children: countryData && countryData.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: country.properties.iso_a2,\n        children: country.properties.name\n      }, country.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(List, \"xZtRenWHO27V8ke5iL8VuTXu6ps=\", false, function () {\n  return [useMap];\n});\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","styles","Form","useMap","jsxDEV","_jsxDEV","API_BASE","countryName","countryCode","List","props","_s","console","log","border","map","countryData","setCountryData","getCountries","data","fetch","then","res","json","catch","err","error","getBoundsHandler","bounds","southwest","northeast","changeCountryHandler","value","selectedCountry","find","country","properties","iso_a2","name","borderHandler","className","list","children","Select","onChange","e","target","key","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/list/List.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"./List.module.css\";\nimport Form from 'react-bootstrap/Form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useMap } from \"react-leaflet\";\n\n\nconst API_BASE = \"http://localhost:3001\";\nlet countryName;\nlet countryCode;\n\nconst List = (props) => {\n    console.log(props.border)\n\n    const map = useMap();\n    \n  const [countryData, setCountryData] = useState(null);\n\n  //get data\n  useEffect(() => {\n    // For getting country data\n    getCountries();\n  }, []);\n\n\n  // Getting country data for select\n  const getCountries = async () => {\n    const data = await fetch(`${API_BASE}/country-data`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryData(data);\n        console.log(data);        \n      })\n      .catch((err) => console.error(\"Error: \", err));    \n  }\n\n\n\n\n  const getBoundsHandler = async (countryName) => {\n    const data = await fetch (`${API_BASE}/bounds-data/${countryName}`)\n    .then((res) => res.json())\n    .then((data) => {\n      console.log(data.bounds);\n      let bounds = [data.bounds.southwest, data.bounds.northeast];\n      console.log(bounds);\n    //   console.log(map.fitBounds());\n    \n    })\n    .catch((err) => {\n      console.error(\"Error: \", err)\n    })\n    return data;\n}\n\n\n\n\n\n// country change event //\nconst changeCountryHandler = (value) => {\n    let selectedCountry = countryData.find(country => country.properties.iso_a2 === value);\n    countryName = selectedCountry.properties.name;\n    countryCode = value;\n    props.borderHandler(selectedCountry);\n    getBoundsHandler(countryName);\n\n}\n\n\n\n\n\n  return (\n    <div className={styles.list}>\n      <Form.Select aria-label=\"Default select example\" onChange={(e) => {\n        changeCountryHandler(e.target.value);\n     \n      }}>\n        {countryData && countryData.map(country => (\n        <option value={country.properties.iso_a2} key={country.key}>{country.properties.name}</option>\n      ))}\n   </Form.Select>\n    </div>\n  );\n};\n\nexport default List;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}