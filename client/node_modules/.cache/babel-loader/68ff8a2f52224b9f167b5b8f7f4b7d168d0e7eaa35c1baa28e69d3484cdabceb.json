{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx\",\n  _s2 = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\nimport List from \"./list/List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://localhost:3001\";\nlet boundsData;\nconst Map = props => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [border, setBorder] = useState(null);\n  const borderHandler = x => {\n    setBorder(x);\n  };\n  _s(useEffect(_s(() => {\n    _s();\n    if (border) {\n      const data = getBoundsHandler(border.properties.name);\n      console.log(data);\n      const map = useMap();\n    }\n  }, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n    return [useMap];\n  }), [border]), \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n    return [useMap];\n  });\n\n  // get data from openCageData to get boundary data \n  const getBoundsHandler = async countryName => {\n    const data = await fetch(`${API_BASE}/bounds-data/${countryName}`).then(res => res.json()).then(data => {\n      console.log(data);\n      return data.bounds;\n    }).catch(err => {\n      console.error(\"Error: \", err);\n      return null;\n    });\n    return data;\n  };\n\n  // function to fit data to bounds\n  // const fitToBounds = (bounds) => {\n  //   const map = useMap();\n  //   map.fitBounds()\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      borderHandler: borderHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [0, 0],\n      zoom: 2,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: border ? border : ''\n      }, JSON.stringify(border), false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(Map, \"frevUS7sySsiVuxNoIOOl+7B8XU=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","styles","MapContainer","TileLayer","GeoJSON","useMap","List","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","boundsData","Map","props","_s2","_s","$RefreshSig$","border","setBorder","borderHandler","x","data","getBoundsHandler","properties","name","console","log","map","countryName","fetch","then","res","json","bounds","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","scrollWheelZoom","attribution","url","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx"],"sourcesContent":["import React from \"react\";\nimport {useState, useEffect} from 'react'\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\nimport List from \"./list/List\";\n\n\nconst API_BASE = \"http://localhost:3001\";\nlet boundsData;\n\n\nconst Map = (props) => {\n\n  const [border, setBorder] = useState(null)\n\n  const borderHandler = (x) => {\n     setBorder(x);\n  }\n\n\n\nuseEffect(() => {\n  if(border) {\n   \n      const data = getBoundsHandler(border.properties.name)\n      console.log(data)\n\n      const map = useMap();\n  }\n\n\n},[border])\n\n  // get data from openCageData to get boundary data \n  const getBoundsHandler = async (countryName) => {\n    const data = await fetch (`${API_BASE}/bounds-data/${countryName}`)\n    .then((res) => res.json())\n    .then((data) => {\n      console.log(data);\n      return data.bounds;\n    })\n    .catch((err) => {\n      console.error(\"Error: \", err)\n      return null;\n    })\n    return data;\n}\n\n// function to fit data to bounds\n// const fitToBounds = (bounds) => {\n//   const map = useMap();\n//   map.fitBounds()\n// }\n\n  return (\n    <>\n     <List\n     borderHandler={borderHandler} />\n      <MapContainer center={[0, 0]} zoom={2} scrollWheelZoom={true}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {/* <Marker position={[51.505, -0.09]}>\n      <Popup>\n        A pretty CSS3 popup. <br /> Easily customizable.\n      </Popup>\n    </Marker> */}\n    <GeoJSON data={border ? border : ''} key={JSON.stringify(border)}/>\n      </MapContainer>\n    </>\n  );\n};\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}