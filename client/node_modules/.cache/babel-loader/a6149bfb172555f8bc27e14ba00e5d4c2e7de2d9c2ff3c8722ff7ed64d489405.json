{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Map.module.css';\nimport 'leaflet/dist/leaflet.css';\nimport { MapContainer, TileLayer, GeoJSON, useMap // Import useMap\n} from 'react-leaflet';\nimport List from './list/List';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:3001';\nlet boundsData;\nconst Map = props => {\n  _s2();\n  const [border, setBorder] = useState(null);\n  const borderHandler = x => {\n    setBorder(x);\n  };\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const fetchBounds = async () => {\n      _s();\n      if (border) {\n        try {\n          const data = await getBoundsHandler(border.properties.name);\n\n          // Access the map instance using useMap here\n          const map = useMap();\n\n          // You can use map.fitBounds() here with the correct data\n          // For example:\n          // map.fitBounds(data);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    };\n    _s(fetchBounds, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n      return [useMap];\n    });\n    fetchBounds();\n  }, [border]);\n  const getBoundsHandler = async countryName => {\n    const data = await fetch(`${API_BASE}/bounds-data/${countryName}`).then(res => res.json()).then(data => {\n      console.log(data);\n      return data.bounds;\n    }).catch(err => {\n      console.error('Error: ', err);\n      return null;\n    });\n    return data;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      borderHandler: borderHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [0, 0],\n      zoom: 2,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: border ? border : ''\n      }, JSON.stringify(border), false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(Map, \"frevUS7sySsiVuxNoIOOl+7B8XU=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","styles","MapContainer","TileLayer","GeoJSON","useMap","List","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","boundsData","Map","props","_s2","border","setBorder","borderHandler","x","_s","$RefreshSig$","fetchBounds","data","getBoundsHandler","properties","name","map","e","console","error","countryName","fetch","then","res","json","log","bounds","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","scrollWheelZoom","attribution","url","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Map.module.css';\nimport 'leaflet/dist/leaflet.css';\nimport {\n  MapContainer,\n  TileLayer,\n  GeoJSON,\n  useMap, // Import useMap\n} from 'react-leaflet';\nimport List from './list/List';\n\nconst API_BASE = 'http://localhost:3001';\nlet boundsData;\n\nconst Map = (props) => {\n  const [border, setBorder] = useState(null);\n\n  const borderHandler = (x) => {\n    setBorder(x);\n  };\n\n  useEffect(() => {\n    const fetchBounds = async () => {\n      if (border) {\n        try {\n          const data = await getBoundsHandler(border.properties.name);\n\n          // Access the map instance using useMap here\n          const map = useMap();\n\n          // You can use map.fitBounds() here with the correct data\n          // For example:\n          // map.fitBounds(data);\n\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    };\n\n    fetchBounds();\n  }, [border]);\n\n  const getBoundsHandler = async (countryName) => {\n    const data = await fetch(`${API_BASE}/bounds-data/${countryName}`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        return data.bounds;\n      })\n      .catch((err) => {\n        console.error('Error: ', err);\n        return null;\n      });\n    return data;\n  };\n\n  return (\n    <>\n      <List borderHandler={borderHandler} />\n      <MapContainer center={[0, 0]} zoom={2} scrollWheelZoom={true}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        />\n        <GeoJSON data={border ? border : ''} key={JSON.stringify(border)} />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}