{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\nimport Airports from \"./airports/Airports\";\nimport Cities from \"./cities/Cities\";\nimport BasicDataBtn from \"./buttons/BasicDataBtn\";\nimport WeatherBtn from \"./buttons/WeatherBtn\";\nimport WikiBtn from \"./buttons/WikiBtn\";\nimport ExchangeRateBtn from \"./buttons/ExchangeRateBtn\";\nimport TimeZoneBtn from \"./buttons/TimeZoneBtn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://localhost:3001\";\nconst Map = props => {\n  _s();\n  // Getting country data for select\n  const [countryData, setCountryData] = useState(null);\n  const [selectVal, setSelectVal] = useState('AF');\n  const getCountries = async () => {\n    const data = await fetch(`${API_BASE}/country-data`).then(res => res.json()).then(data => {\n      setCountryData(data);\n    }).catch(err => console.error(\"Error: \", err));\n  };\n  const changeOnLoadHandler = async () => {\n    const data = await fetch(`${API_BASE}/get-country`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify({\n        lat: props.location.latitude,\n        lng: props.location.longitude\n      })\n    }).then(res => res.json()).then(data => {\n      setSelectVal(data.countryCode);\n    }).catch(e => console.error('Error:', e));\n  };\n  useEffect(() => {\n    getCountries();\n  }, []);\n  useEffect(() => {\n    changeOnLoadHandler();\n  }, []);\n\n  // Getting the border\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const borderHandler = x => {\n    setGeoJsonData(x);\n  };\n\n  // ------- Airports ---------- //\n\n  const [airports, setAirports] = useState(null);\n\n  // Getting Airport data //\n  const airportsHandler = async countryCode => {\n    let data = await fetch(`${API_BASE}/airport-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        countryCode: countryCode\n      })\n    }).then(res => res.json()).catch(e => console.error('Error', e));\n    setAirports(data);\n  };\n\n  // ------- Cities ---------- //\n\n  const [cities, setCities] = useState(null);\n\n  // Getting City data //\n  const citiesHandler = async countryCode => {\n    let data = await fetch(`${API_BASE}/city-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        countryCode: countryCode\n      })\n    }).then(res => res.json()).catch(e => console.error('Error', e));\n    setCities(data);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [0, 0],\n      zoom: 2,\n      scrollWheelZoom: true,\n      minZoom: 1,\n      children: [/*#__PURE__*/_jsxDEV(BasicDataBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(WeatherBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(WikiBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ExchangeRateBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TimeZoneBtn, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        borderHandler: borderHandler,\n        countryData: countryData,\n        getAirports: airportsHandler,\n        getCities: citiesHandler,\n        location: props.location,\n        selectVal: selectVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapLayers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Airports, {\n        airports: airports\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Cities, {\n        cities: cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: {\n          color: \"red\",\n          weight: 1,\n          opacity: 1\n        }\n      }, JSON.stringify(geoJsonData), false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Map, \"PjJUP8t3PFK2t0NqsIRrwUdY/A4=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","GeoJSON","styles","List","MapLayers","Airports","Cities","BasicDataBtn","WeatherBtn","WikiBtn","ExchangeRateBtn","TimeZoneBtn","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","Map","props","_s","countryData","setCountryData","selectVal","setSelectVal","getCountries","data","fetch","then","res","json","catch","err","console","error","changeOnLoadHandler","method","headers","body","JSON","stringify","lat","location","latitude","lng","longitude","countryCode","e","geoJsonData","setGeoJsonData","borderHandler","x","airports","setAirports","airportsHandler","cities","setCities","citiesHandler","children","center","zoom","scrollWheelZoom","minZoom","fileName","_jsxFileName","lineNumber","columnNumber","getAirports","getCities","style","color","weight","opacity","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\n\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\nimport Airports from \"./airports/Airports\";\nimport Cities from \"./cities/Cities\";\nimport BasicDataBtn from \"./buttons/BasicDataBtn\";\nimport WeatherBtn from \"./buttons/WeatherBtn\";\nimport WikiBtn from \"./buttons/WikiBtn\";\nimport ExchangeRateBtn from \"./buttons/ExchangeRateBtn\";\nimport TimeZoneBtn from \"./buttons/TimeZoneBtn\";\n\nconst API_BASE = \"http://localhost:3001\";\n\nconst Map = (props) => {\n  // Getting country data for select\n  const [countryData, setCountryData] = useState(null);\n  const [selectVal, setSelectVal] = useState('AF')\n\n  const getCountries = async () => {\n    const data = await fetch(`${API_BASE}/country-data`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryData(data);\n      })\n      .catch((err) => console.error(\"Error: \", err));\n  };\n\nconst changeOnLoadHandler = async () => {\n  const data = await fetch(`${API_BASE}/get-country`,{\n    method: 'POST',\n    headers: {\n      \"Content-Type\": 'application/json',\n    },\n    body : JSON.stringify({\n      lat: props.location.latitude,\n      lng: props.location.longitude\n    })\n  })\n  .then(res => res.json())\n  .then((data) => {\n    setSelectVal(data.countryCode);\n  })\n  .catch(e => console.error('Error:', e))\n}\n\n\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n  useEffect(()=> {\n    changeOnLoadHandler();\n  },[])\n \n\n  // Getting the border\n  const [geoJsonData, setGeoJsonData] = useState(null);\n\n  const borderHandler = (x) => {\n    setGeoJsonData(x);\n  };\n\n\n// ------- Airports ---------- //\n\n  const [airports, setAirports] = useState(null)\n\n  // Getting Airport data //\n  const airportsHandler = async (countryCode) => {\n    let data = await fetch(`${API_BASE}/airport-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        countryCode: countryCode,\n      }),\n    })\n      .then((res) => res.json())\n      .catch(e => console.error('Error', e))\n      setAirports(data);\n  };\n\n\n  // ------- Cities ---------- //\n\nconst [cities, setCities] = useState(null);\n\n  // Getting City data //\n  const citiesHandler = async (countryCode) => {\n\n    let data = await fetch(`${API_BASE}/city-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        countryCode: countryCode\n      }),\n    })\n    .then((res) => res.json())\n    .catch(e => console.error('Error',e))\n\n    setCities(data);\n  }\n\n\n\n\n  return (\n    <>\n      <MapContainer center={[0, 0]} zoom={2} scrollWheelZoom={true} minZoom={1}>\n      <BasicDataBtn geoJsonData={geoJsonData} />\n      <WeatherBtn geoJsonData={geoJsonData} />\n      <WikiBtn geoJsonData={geoJsonData} />\n      <ExchangeRateBtn geoJsonData={geoJsonData} />\n      <TimeZoneBtn geoJsonData={geoJsonData} />\n        <List\n          borderHandler={borderHandler}\n          countryData={countryData}\n          getAirports={airportsHandler}\n          getCities={citiesHandler}\n          location={props.location}\n          selectVal={selectVal}\n        />\n        <MapLayers />\n        < Airports airports={airports} />\n        < Cities cities={cities} />\n        <GeoJSON\n          data={geoJsonData}\n          key={JSON.stringify(geoJsonData)}\n          style={{\n            color: \"red\",\n            weight: 1,\n            opacity: 1,\n          }}\n        />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}