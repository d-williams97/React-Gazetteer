{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/list/List.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect, createContext } from \"react\";\nimport styles from \"./List.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useMap } from \"react-leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext(1);\nconst API_BASE = \"http://localhost:3001\";\nlet countryName;\nlet countryCode;\nlet selectedCountry;\nconst List = props => {\n  _s();\n  const [selectVal, setSelectVal] = useState(\"AF\");\n  useEffect(() => {\n    changeCountryHandler(selectVal);\n  }, [props.countryData]);\n  const map = useMap();\n  const getBoundsHandler = async countryName => {\n    const data = await fetch(`${API_BASE}/bounds-data/${countryName}`).then(res => res.json()).then(data => {\n      let bounds = [Object.values(data.bounds.southwest), Object.values(data.bounds.northeast)];\n      map.fitBounds(bounds);\n    }).catch(err => {\n      console.error(\"Error: \", err);\n    });\n  };\n  const changeCountryHandler = async value => {\n    if (props.countryData) {\n      selectedCountry = props.countryData.find(country => country.properties.iso_a2 === value\n      // where I can do useContext.\n      );\n    }\n\n    if (selectedCountry) {\n      countryName = selectedCountry.properties.name;\n      countryCode = value;\n      setSelectVal(countryCode);\n      props.borderHandler(selectedCountry); // getting border\n      props.getAirports(countryCode); // getting airport data\n      props.getCities(countryCode); // getting city data\n      getBoundsHandler(countryName); // changes map view\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.list,\n    children: /*#__PURE__*/_jsxDEV(Form.Select, {\n      \"aria-label\": \"Default select example\",\n      value: selectVal,\n      onChange: e => {\n        changeCountryHandler(e.target.value);\n      },\n      children: props.countryData && props.countryData.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: country.properties.iso_a2,\n        children: country.properties.name\n      }, country.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(List, \"3VSXhTNscCDSNLwntBZ9B8vKSjc=\", false, function () {\n  return [useMap];\n});\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","createContext","styles","Form","useMap","jsxDEV","_jsxDEV","DataContext","API_BASE","countryName","countryCode","selectedCountry","List","props","_s","selectVal","setSelectVal","changeCountryHandler","countryData","map","getBoundsHandler","data","fetch","then","res","json","bounds","Object","values","southwest","northeast","fitBounds","catch","err","console","error","value","find","country","properties","iso_a2","name","borderHandler","getAirports","getCities","className","list","children","Select","onChange","e","target","key","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/list/List.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect, createContext } from \"react\";\nimport styles from \"./List.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useMap } from \"react-leaflet\";\n\n\nexport const DataContext = createContext(1);\n\n\n\n\nconst API_BASE = \"http://localhost:3001\";\nlet countryName;\nlet countryCode;\nlet selectedCountry;\n\nconst List = (props) => {\n  const [selectVal, setSelectVal] = useState(\"AF\");\n\n  useEffect(() => {\n    changeCountryHandler(selectVal);\n  }, [props.countryData]);\n\n  const map = useMap();\n\n  const getBoundsHandler = async (countryName) => {\n    const data = await fetch(`${API_BASE}/bounds-data/${countryName}`)\n      .then((res) => res.json())\n      .then((data) => {\n        let bounds = [\n          Object.values(data.bounds.southwest),\n          Object.values(data.bounds.northeast),\n        ];\n        map.fitBounds(bounds);\n      })\n      .catch((err) => {\n        console.error(\"Error: \", err);\n      });\n  };\n\n\n  const changeCountryHandler = async (value) => {\n    if (props.countryData) {\n      selectedCountry = props.countryData.find(\n        (country) => country.properties.iso_a2 === value\n        // where I can do useContext.\n      );\n    }\n    if (selectedCountry) {\n      countryName = selectedCountry.properties.name;\n      countryCode = value;\n      setSelectVal(countryCode);\n      props.borderHandler(selectedCountry); // getting border\n      props.getAirports(countryCode); // getting airport data\n      props.getCities(countryCode); // getting city data\n      getBoundsHandler(countryName); // changes map view\n    }\n  };\n\n  return (\n    <div className={styles.list}>\n      <Form.Select\n        aria-label=\"Default select example\"\n        value={selectVal}\n        onChange={(e) => {\n          changeCountryHandler(e.target.value);\n        }}\n      >\n        {props.countryData &&\n          props.countryData.map((country) => (\n            <option value={country.properties.iso_a2} key={country.key}>\n              {country.properties.name}\n            </option>\n          ))}\n      </Form.Select>\n    </div>\n  );\n};\n\nexport default List;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}