{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://localhost:3001\";\nconst Map = props => {\n  _s();\n  // Getting country data for select\n  const [countryData, setCountryData] = useState(null);\n  const getCountries = async () => {\n    const data = await fetch(`${API_BASE}/country-data`).then(res => res.json()).then(data => {\n      setCountryData(data);\n    }).catch(err => console.error(\"Error: \", err));\n  };\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n  // Getting the border\n  const [border, setBorder] = useState(null);\n  const borderHandler = x => {\n    setBorder(x);\n  };\n\n  // Getting Airport data\n  const airportsHandler = async countryCode => {\n    let data = await fetch(`${API_BASE}/city-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        countryCode: countryCode\n      })\n    }).then(res => res.json()).catch(e => console.error('Error', e));\n    console.log(data);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [0, 0],\n      zoom: 2,\n      scrollWheelZoom: true,\n      minZoom: 1,\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        borderHandler: borderHandler,\n        countryData: countryData,\n        getAirports: airportsHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapLayers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: border ? border : \"\",\n        style: {\n          color: \"red\",\n          weight: 1,\n          opacity: 1\n        }\n      }, JSON.stringify(border), false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Map, \"+YhM/efW/Hg5KSplz+wDEitRX4k=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","GeoJSON","styles","List","MapLayers","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","Map","props","_s","countryData","setCountryData","getCountries","data","fetch","then","res","json","catch","err","console","error","border","setBorder","borderHandler","x","airportsHandler","countryCode","method","headers","body","JSON","stringify","e","log","children","center","zoom","scrollWheelZoom","minZoom","getAirports","fileName","_jsxFileName","lineNumber","columnNumber","style","color","weight","opacity","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\n\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\n\nconst API_BASE = \"http://localhost:3001\";\n\nconst Map = (props) => {\n  // Getting country data for select\n  const [countryData, setCountryData] = useState(null);\n\n  const getCountries = async () => {\n    const data = await fetch(`${API_BASE}/country-data`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryData(data);\n      })\n      .catch((err) => console.error(\"Error: \", err));\n  };\n\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n  // Getting the border\n  const [border, setBorder] = useState(null);\n\n  const borderHandler = (x) => {\n    setBorder(x);\n  };\n\n  // Getting Airport data\n  const airportsHandler = async (countryCode) => {\n    let data = await fetch(`${API_BASE}/city-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        countryCode: countryCode,\n      }),\n    })\n      .then((res) => res.json())\n      .catch(e => console.error('Error', e))\n\n      console.log(data);\n  };\n\n  return (\n    <>\n      <MapContainer center={[0, 0]} zoom={2} scrollWheelZoom={true} minZoom={1}>\n        <List\n          borderHandler={borderHandler}\n          countryData={countryData}\n          getAirports={airportsHandler}\n        />\n        <MapLayers />\n        <GeoJSON\n          data={border ? border : \"\"}\n          key={JSON.stringify(border)}\n          style={{\n            color: \"red\",\n            weight: 1,\n            opacity: 1,\n          }}\n        />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}