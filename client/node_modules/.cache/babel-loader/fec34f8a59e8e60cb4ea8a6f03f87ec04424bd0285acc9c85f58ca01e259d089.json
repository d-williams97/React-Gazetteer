{"ast":null,"code":"var _jsxFileName = \"/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://localhost:3001\";\nconst Map = props => {\n  _s();\n  // Getting country data for select\n  const getCountries = async () => {\n    const data = await fetch(`${API_BASE}/country-data`).then(res => res.json()).then(data => {\n      setCountryData(data);\n    }).catch(err => console.error(\"Error: \", err));\n  };\n  const [border, setBorder] = useState(null);\n  const [countryData, setCountryData] = useState(null);\n\n  // For getting country data\n  useEffect(() => {\n    getCountries();\n  }, []);\n  const borderHandler = x => {\n    setBorder(x);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [0, 0],\n      zoom: 2,\n      scrollWheelZoom: true,\n      minZoom: 1,\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        borderHandler: borderHandler,\n        border: border,\n        countryData: countryData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapLayers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: border ? border : \"\",\n        style: {\n          color: 'red',\n          weight: 1,\n          opacity: 1\n        }\n      }, JSON.stringify(border), false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Map, \"zVbjbUYWZQ3P5lxZuVwmVvBpRqw=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","GeoJSON","styles","List","MapLayers","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","Map","props","_s","getCountries","data","fetch","then","res","json","setCountryData","catch","err","console","error","border","setBorder","countryData","borderHandler","x","children","center","zoom","scrollWheelZoom","minZoom","fileName","_jsxFileName","lineNumber","columnNumber","style","color","weight","opacity","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/danielwilliams/Documents/Personal/Web Dev/Other/Projects/react-gazetteer/client/src/components/map/Map.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  MapContainer,\n  GeoJSON,\n} from \"react-leaflet\";\n\nimport styles from \"./Map.module.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport List from \"./list/List\";\nimport MapLayers from \"./mapLayers/MapLayers\";\n\nconst API_BASE = \"http://localhost:3001\";\n\n\n\n\n\nconst Map = (props) => {\n\n    // Getting country data for select\n    const getCountries = async () => {\n      const data = await fetch(`${API_BASE}/country-data`)\n        .then((res) => res.json())\n        .then((data) => {\n          setCountryData(data);  \n        })\n        .catch((err) => console.error(\"Error: \", err));    \n    }\n\n\n\n    \n  const [border, setBorder] = useState(null);\n\n  const [countryData, setCountryData] = useState(null);\n\n    // For getting country data\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n\n  const borderHandler = (x) => {\n    setBorder(x);\n  };\n\n\n\n  return (\n    <>\n      <MapContainer center={[0, 0]} zoom={2} scrollWheelZoom={true} minZoom={1} >\n        <List borderHandler={borderHandler} border={border} countryData={countryData} />\n        <MapLayers />\n        <GeoJSON data={border ? border : \"\"} key={JSON.stringify(border)} style={{\n          color:'red',\n          weight: 1,\n          opacity: 1}\n        } />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default Map;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SACEC,YAAY,EACZC,OAAO,QACF,eAAe;AAEtB,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAO,0BAA0B;AAEjC,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,SAAS,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,QAAQ,GAAG,uBAAuB;AAMxC,MAAMC,GAAG,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAEnB;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,eAAc,CAAC,CACjDO,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEF,IAAI,IAAK;MACdK,cAAc,CAACL,IAAI,CAAC;IACtB,CAAC,CAAC,CACDM,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEF,GAAG,CAAC,CAAC;EAClD,CAAC;EAKH,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAM,CAAC4B,WAAW,EAAEP,cAAc,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACFC,SAAS,CAAC,MAAM;IACdc,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMc,aAAa,GAAIC,CAAC,IAAK;IAC3BH,SAAS,CAACG,CAAC,CAAC;EACd,CAAC;EAID,oBACEtB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eACEvB,OAAA,CAACN,YAAY;MAAC8B,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAE;MAACC,IAAI,EAAE,CAAE;MAACC,eAAe,EAAE,IAAK;MAACC,OAAO,EAAE,CAAE;MAAAJ,QAAA,gBACvEvB,OAAA,CAACH,IAAI;QAACwB,aAAa,EAAEA,aAAc;QAACH,MAAM,EAAEA,MAAO;QAACE,WAAW,EAAEA;MAAY;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChF/B,OAAA,CAACF,SAAS;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACb/B,OAAA,CAACL,OAAO;QAACa,IAAI,EAAEU,MAAM,GAAGA,MAAM,GAAG,EAAG;QAA8Bc,KAAK,EAAE;UACvEC,KAAK,EAAC,KAAK;UACXC,MAAM,EAAE,CAAC;UACTC,OAAO,EAAE;QAAC;MACX,GAJyCC,IAAI,CAACC,SAAS,CAACnB,MAAM,CAAC;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAI7D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ;EAAC,gBACf,CAAC;AAEP,CAAC;AAACzB,EAAA,CA5CIF,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA8CT,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}